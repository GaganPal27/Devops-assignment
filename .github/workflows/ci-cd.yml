name: CI/CD Pipeline

on:
  push:
    branches: [develop]
  pull_request:
    branches: [main]

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPO_BACKEND: 734563841549.dkr.ecr.us-east-1.amazonaws.com/backend
      ECR_REPO_FRONTEND: 734563841549.dkr.ecr.us-east-1.amazonaws.com/frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install frontend deps
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test

    - name: Build frontend Docker image
      working-directory: ./frontend
      run: docker build -t frontend-app:${{ github.sha }} .

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend deps
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run backend tests
      working-directory: ./backend
      run: pytest

    - name: Build backend Docker image
      working-directory: ./backend
      run: docker build -t backend-app:${{ github.sha }} .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to ECR
      run: aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REPO_BACKEND

    - name: Tag & push backend image to ECR
      run: |
        docker tag backend-app:${{ github.sha }} $ECR_REPO_BACKEND:${{ github.sha }}
        docker push $ECR_REPO_BACKEND:${{ github.sha }}

    - name: Tag & push frontend image to ECR
      run: |
        docker tag frontend-app:${{ github.sha }} $ECR_REPO_FRONTEND:${{ github.sha }}
        docker push $ECR_REPO_FRONTEND:${{ github.sha }}


  deploy-frontend:
    name: Deploy Frontend to ECS
    runs-on: ubuntu-latest
    needs: build-test-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy frontend to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ecs-task-definition-frontend.json
        service: frontend-service
        cluster: devops-assignment-cluster
        wait-for-service-stability: true

  deploy-backend:
    name: Deploy Backend to ECS
    runs-on: ubuntu-latest
    needs: build-test-push
    if: github.ref == 'refs/heads/main'

      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy backend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-definition-backend.json
          service: backend-service
          cluster: devops-assignment-cluster
          wait-for-service-stability: true

